# -*- coding: utf-8 -*-
"""Kopie von A - Calculation of median fluorescence.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jW209qDQsGuvzxqa7CecvKo2h63HKduQ

Welcome,
This is the curated Python code I used for the analysis of TIRF microscopy data in my PhD thesis. This code processes the raw data and computes the average fluorescence intensity. 



---

Experimental parameters
  - `dT`: frame rate in seconds
  - `sample_name`: enter the name of experiment or sample
  - `protein_of_interest`: enter the name of your protein of interest
  - `reference_protein`: enter the name of your reference protein
"""

dT = 0.5 
sample_name = 'Bond007'
protein_of_interest = 'Gun1'
reference_protein = 'Car2'

"""Enter the directory pathway and load in your data.

The time information in the files should be the frame number, like 1, 2, 3, ...
Columns in input data:
  - frame number
  - signal of protein of interest
  - signal of reference protein

`x` will be a parameter for iterative executions later on.

Files will be called *k1*, *k2*, *k3*, etc.
Each *k* contains time information, reference signal and signal of interest.

"""

import numpy as np
import csv
import os
os.chdir( 'C:\\Users\\my path\\...' )

items = os.listdir( 'C:\\Users\\my path\\...' )
file_list = [ ]
for names in items:
    if names.endswith( '.txt' ) :
        file_list.append( names )

x = range( 0 , len( file_list ) )    

for i in x:
    sample = [ [ ] , [ ] , [ ] ]
    with open( file_list[i] , newline = '') as csvDataFile:
        csvReader = csv.reader(csvDataFile, dialect = 'excel-tab')
        next(csvReader)                                     
        for row in csvReader:
            sample = np.append( sample, 
                               [ [ float( row[0] ) ] , 
                                 [ float( row[1] ) ] , 
                                 [ float( row[2] ) ] ] , axis = 1 ) 
            locals()[ 'k' + str(i) ] = [ sample[0] , sample[2] , sample[1] ]

"""Normalize data over the integral.

Normalized data is renamed into *k1_norm*, *k2_norm*, *k3_norm*, etc.
"""

import scipy
import scipy.integrate as integrate

for i in x:
    F_ref = integrate.simps( eval( 'k' + str(i) )[1] , 
                                  x = eval( 'k' + str(i) )[0] , 
                                  axis = 0 , even = 'first')
    F_sample = integrate.simps( eval( 'k' + str(i) )[2] , 
                                     x = eval( 'k' + str(i) )[0] , 
                                     axis = 0 , even = 'first' )
    locals() [ 'k' + str(i) + '_norm' ] = np.array( [ eval( 'k' + str(i) )[0] , 
                                                      eval( 'k' + str(i) )[1] / F_ref , 
                                                      eval( 'k' + str(i) )[2] / F_sample ] )

"""Sorting of all *ki_norm* by length.
Renaming of samples based on lifetime:
 - *f0* is longest
 - *f1* is second longest
 - *f2* is third longest
 - etc

Creation of a reference signal for the cross-correlation:
  - Name: `ref`
  - Add n number of data points before and after signal of reference protein of *f0*
  - n = length of *f0*
  - Value of new data points: 0
"""

k_all = [ ]
for i in x:
    k_all.append( eval( 'k' + str(i) + '_norm' ) )


def length_sorting( item ) :
    return item[ 0 ].size

k_all.sort( key = length_sorting )   

for i in x:
    locals() [ 'f' + str(i) ] = [ np.array( range( 0, len( k_all[i][0] ) ) ) , 
                                  k_all[i][1] , 
                                  k_all[i][2] ]   

ref = [ np.array( range( 0, len( k_all[-1][0] ) + 2 * len( k_all[-1][0]-1) ) ) ,
       np.concatenate( ( np.zeros( ( len( k_all[-1][0]-1 ) ) ) , 
                         k_all[-1][1] , 
                         np.zeros( ( len( k_all[-1][0]-1) ) ) ) ) ]

"""Cross-correlation of all *fi* with `ref`. Only signal of reference protein is taken into account. 

To cross-correlate *fi* with `ref`, the time information of each *fi* is changed.
The altering time information is `T`. `fT` is *fi* with `T`. 
The cross-correlation value between `ref` and *fi* calculated. A list with `T` and the cross-correlation is saved. Then `T` changes and the cycle starts again. 

To explain this code concretely, imagine `ref` has 15 time points and *fi* has 4 time points. The code calculate the cross-correlation of *fi* with
  - `ref` signal 1, 2, 3 and 4 
  - then with `ref` signal 2, 3, 4 and 5
  - then with `ref` signal 3, 4, 5 and 6 
  - ...
  - and finally with `ref` signal 12, 13, 14 and 15.

"""

for j in x:
    output = np.array( [ [ ] , [ ] ] )
    for i in range( 0 , len( ref[0] ) ):
            T = eval( 'f' + str(j) )[0] + i
            fT = [ T , eval( 'f' + str(j) )[1] ]
            sel = [ i for i in range( 0 , len( ref[0] ) ) if ref[0][i] in fT[0] ] 
            if len( ref[0][sel] ) == len( fT[0] ):
                    true_sel = sel
            else:
                    false_sel = sel
            output = np.append( output , 
                               [ [ i ] , 
                                [ sum( fT[ 1 ] * ref[ 1 ][ true_sel ] ) ] ] , 
                               axis = 1 )
            locals() [ 'output' + str(j) ] = [ output[0] , output[1] ]

"""Analyze lists with all `T` and the cross-correlation values of each *fi*. `T` of interest is the one with the maximum cross-correlation value. Update time information of each *fi* by its `T` of interest. New *fi* are called *f_tau1*, *f_tau2*, *f_tau3*, etc. 

All samples are now time aligned based on the signal of the reference protein.
"""

for i in x:
    locals()[ 'f' + str(i) + '_max' ] = eval( 'output' + str(i) )[1].argmax()
    locals()[ 'f_tau' + str(i) ] = [eval( 'f' + str(i) )[0] + eval( 'f' + str(i) + '_max' ), 
                                    eval( 'f' + str(i) )[1] , 
                                    eval( 'f' + str(i) )[2] ]

"""Plotting of all *f_tau*. Plot is saved with ending *_raw*."""

import matplotlib
matplotlib.use( 'Agg' )
from matplotlib import pyplot as plt

plt.figure()
for i in x:
    plt.plot( eval('f_tau' + str(i) )[0] ,
              eval('f_tau' + str(i))[1] , 
              linewidth = 0.7 , alpha = 0.5 , color = 'r' )
    plt.plot( eval('f_tau' + str(i) )[0] , 
              eval('f_tau' + str(i) )[2] ,
              linewidth = 0.7 , alpha = 0.5 , color = 'g' ,
              label = protein_of_interest )
plt.ylabel( 'FI' , fontsize = 12 )
plt.xlabel( 'Time in seconds' , fontsize = 12 )
plt.title( protein_of_interest + '(green),' 
          + reference_protein + '(red), n = ' + str(len( file_list )) , 
           fontsize = 12 , verticalalignment = 'bottom')

plt.savefig( sample_name + '_raw')

"""Calculation of median of all *f_tau* and median absolute deviation scaled for asymptotically normal consistency.

Median value: `median_f_tau`

Errors: `median_f_tau_mad`
"""

import scipy
from scipy.stats import norm

median_f_tau = np.array( [ [ ] , [ ] , [ ] ] )
median_f_tau_mad = np.array( [ [ ] , [ ] , [ ] ] )
c = scipy.stats.norm.ppf( 3 / 4 )
for t in ref[0]:
    L = np.array( [ [ ] , [ ] ] )
    for i in x:
        if t in eval( 'f_tau' + str(i) )[0]:
            f_t = eval( 'f_tau' + str(i) )[0].tolist().index( t )
            L = np.append( L , 
                           [ [ eval( 'f_tau' + str(i) )[1][f_t] ] ,
                             [ eval( 'f_tau' + str(i) )[2][f_t] ] ], 
                             axis = 1 )
    if len( L[0] ) < ( len( file_list ) / 2 ) :
        continue
    median_f_tau = np.append( median_f_tau , 
                              [ [t] , 
                                [ np.nanmedian( L[0] ) ] ,
                                [ np.nanmedian( L[1] ) ] ] , 
                                axis = 1 )
    median_f_tau_mad = np.append( median_f_tau_mad , 
                                  [ [t] , 
                                  [ np.nanmedian( abs( L[0] - np.nanmedian( L[0] ) ) ) / c ] , 
                                  [ np.nanmedian( abs( L[1] - np.nanmedian( L[1] ) ) ) / c ] ] ,
                                  axis = 1 )

"""Normalize median and error. 

Saving data as csv file:
  - column 1: time
  - column 2: reference protein
  - column 3: protein of interest
  - column 4: error for reference protein
  - column 5: error for protein of interest
"""

median_f_tau_norm = np.array( 
    [ median_f_tau[0] * dT , 
    ( median_f_tau[1] - np.nanmin( median_f_tau[1] ) ) / 
    ( np.nanmax( median_f_tau[1] ) - np.nanmin( median_f_tau[1] ) ) , 
    ( median_f_tau[2] - np.nanmin( median_f_tau[2] ) ) / 
    ( np.nanmax( median_f_tau[2] ) - np.nanmin( median_f_tau[2] ) ) ] )
median_f_tau_mad_norm = np.array( 
    [ median_f_tau_mad[0] * dT , 
    median_f_tau_mad[1] / 
    ( np.nanmax( median_f_tau[1] ) - np.nanmin( median_f_tau[1] ) ) ,
    median_f_tau_mad[2] / 
    ( np.nanmax( median_f_tau[2] ) - np.nanmin( median_f_tau[2] ) ) ] )

import csv
np.savetxt('med' + sample_name + '_med.csv' , 
           np.c_[ median_f_tau_norm[0] , 
                  median_f_tau_norm[1] , 
                  median_f_tau_norm[2] , 
                  median_f_tau_mad_norm[1] , 
                  median_f_tau_mad_norm[2] ], delimiter = ' , ' )

"""Plotting of normalized data."""

import matplotlib
matplotlib.use( 'Agg' )
from matplotlib import pyplot as plt

x = median_f_tau_norm[0]
y1 = median_f_tau_norm[1]
y2 = median_f_tau_norm[2]
yerr1 = median_f_tau_mad_norm[1]
yerr2 = median_f_tau_mad_norm[2]

plt.figure()
plt.plot( x , y1 , linewidth = 1.5 , color = 'r', label = reference_protein )
plt.plot( x , y2 , linewidth = 1.5 , color = 'g' , label = protein_of_interest )
plt.fill_between( x , y1 - yerr1 , y1 + yerr1 , alpha = 0.3 , facecolor = 'r')
plt.fill_between( x , y2 - yerr2 , y2 + yerr2 , alpha = 0.3 , facecolor = 'g')

plt.ylabel( 'FI' , fontsize = 12 )
plt.xlabel( 'Time in seconds' , fontsize = 12 )
plt.title( protein_of_interest + '(green),' 
           + reference_protein + '(red), n = ' + str(len( file_list ) ) , 
           fontsize = 12 , verticalalignment = 'bottom')
plt.legend()

plt.savefig( sample_name + '_med')

"""`der7`, `der9` and `der11` are Savitzky-Golay vectors to compute first derivates. 

Plotting of first derivative of the median signals.



"""

der7 = np.array( [ -3 / 28 , -2 / 28 , -1 / 28 , 0 , 1 / 28 , 2 / 28 , 3 / 28 ] )
der9 = np.array( [ -4 / 60 , -3 / 60 , -2 / 60 , -1 / 60 , 0 , 
                   1 / 60 , 2 / 60 , 3 / 60 , 4 / 60 ])
der11 = np.array( [ -5 / 110 , -4 / 110 , -3 / 110 , -2 / 110 , -1 / 110 , 0 , 
                    1 / 110 , 2 / 110 , 3 / 110 , 4 / 110 , 5 / 110 ] )

der_med = np.array( [ median_f_tau[0] ,
                      np.convolve( median_f_tau[1] , der11 , 'same' ) ,
                      np.convolve( median_f_tau[2] , der11 , 'same' ) ] )

for i in range( 1 , 3 ):
    for j in range( 0 , 6 ):
        der_med[i][j] = np.nan
    for k in range( -7 , -1 ):
        der_med[i][k] = np.nan


import matplotlib
matplotlib.use( 'Agg' )
from matplotlib import pyplot as plt

plt.figure()
plt.plot( der_med[0] * dT , der_med[1] , 
         linewidth = 1.5 , color = 'r' , label = reference_protein )
plt.plot( der_med[0] * dT , der_med[2] , 
         linewidth = 1.5 , color = 'g' , label = protein_of_interest )
plt.savefig( sample_name + '_derivative_median' )

"""Calculation of a baseline that is set as 0.
  - Identify time points of local minima and maxima of derivative after global maximum.
  - Average median values of these time points. This value is set to 0. 
  - Normalize data from new 0 to 1.

Saving data as csv file.
"""

from scipy.signal import argrelextrema

for i in range ( 1 , 3 ):
    coll_der = np.array( [ [ ] ] ) 
    coll_med = np.array( [ [ ] ] )
    coll_med_base = np.array( [ [ ] ] )
    coll_med_err = np.array( [ [ ] ] )
    all_loc_min = [ ]
    all_loc_max = [ ]
    coll_bsl = np.array( [ [ ] ] )
    coll_bsl_err = np.array( [ [ ] ] )
    global_max = int( der_med[i].tolist().index( np.nanmax( der_med[i] ) ) )
    end = len( median_f_tau[0] )
    for t in range( global_max , end ) :     
        coll_der = np.append( coll_der , [ der_med[i][t] ] )
        coll_med = np.append( coll_med , [ median_f_tau[i][t] ] )
        coll_med_err = np.append( coll_med_err , [ median_f_tau_mad[i][t] ] )
    all_loc_min.append( argrelextrema( coll_der , np.less ) )
    all_loc_max.append( argrelextrema( coll_der , np.greater ) )
    all_loc = all_loc_max + all_loc_min
    for s in range( 0 , 2 ):
        for u in range( 0 , len( all_loc[s] ) ) :
            coll_bsl = np.append( coll_bsl , [ coll_med[ all_loc[s][u] ] ] )
            coll_bsl_err = np.append( coll_bsl_err , [ coll_med_err[ all_loc[s][u] ] ] ) 
    locals()[ 'base_med_' + str(i) ] = np.mean( coll_bsl )
    locals()[ 'base_med_err_' + str(i) ] = np.mean( coll_bsl_err )

median_f_tau_norm = np.array( [ median_f_tau[0] * dT , 
                              ( median_f_tau[1] - base_med_1 ) / 
                              ( np.nanmax( median_f_tau[1] ) - base_med_1 ) ,
                              ( median_f_tau[2] - base_med_2 ) / 
                              ( np.nanmax( median_f_tau[2] ) - base_med_2 ) ] )
median_f_tau_mad_norm = np.array( [ median_f_tau_mad[0] * dT , 
                                  median_f_tau_mad[1] / 
                                  ( np.nanmax( median_f_tau[1] ) - base_med_1 ) ,
                                  median_f_tau_mad[2] / 
                                  ( np.nanmax( median_f_tau[2] ) - base_med_2 ) ] )

import csv

np.savetxt( 'med' + sample_name + '_med_bsl.csv' , 
            np.c_[ median_f_tau_norm[0] , 
            median_f_tau_norm[1] , 
            median_f_tau_norm[2] , 
            median_f_tau_mad_norm[1] , 
            median_f_tau_mad_norm[2] ], delimiter = ' , ' )

"""Plotting of data normalized to the calculated baseline."""

import matplotlib
matplotlib.use( 'Agg' )
from matplotlib import pyplot as plt

x = median_f_tau_norm[0]
y1 = median_f_tau_norm[1]
y2 = median_f_tau_norm[2]
yerr1 = median_f_tau_mad_norm[1]
yerr2 = median_f_tau_mad_norm[2]

plt.figure()
plt.plot( x , y1 , linewidth = 1.5 , color = 'r' , label = reference_protein )
plt.plot( x , y2 , linewidth = 1.5 , color = 'g' , label = protein_of_interest )
plt.fill_between( x , y1 - yerr1 , y1 + yerr1 , alpha = 0.3 , facecolor = 'r' )
plt.fill_between( x , y2 - yerr2 , y2 + yerr2 , alpha = 0.3 , facecolor = 'g' )

plt.ylabel( 'FI' , fontsize = 12 )
plt.xlabel( 'Time in seconds' , fontsize = 12 )
plt.title( protein_of_interest + '(green),' 
           + reference_protein + '(red), n = ' + str( len( file_list ) ) ,
           fontsize = 12 , verticalalignment = 'bottom')
plt.legend()
plt.axhline( y = 0 , linewidth = 1 , color = 'k' )

plt.savefig( sample_name + '_med_bsl' )